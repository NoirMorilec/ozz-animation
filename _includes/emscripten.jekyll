<div class="w3-center">
    <p class="w3-tiny" id="sample_status">Initializing WebGL</p>
</div>
<div id="sample_border">
  <div class="w3-display-container">
    <div style="font-size:0; line-height:0;">
      <canvas id="sample_canvas" class="w3-round w3-black w3-card-2" oncontextmenu="event.preventDefault()"></canvas>
    </div> 
    <div>
      <input id="full_screen" type="button" class="w3-btn w3-theme w3-display-bottomright w3-tiny w3-white w3-border w3-border-grey w3-round" value="Fullscreen" onclick="Module.requestFullscreen(false, true)">
    </div>
  </div>
  <div>
    <textarea id="sample_output" class="w3-light-grey w3-round w3-tiny w3-card-2" rows="6" style="width:100%;resize:none;"></textarea>
  </div>
</div>
<script>
  var sample_border = document.getElementById("sample_border");
  var sample_canvas = document.getElementById("sample_canvas");
  var sample_status = document.getElementById("sample_status");
  var sample_output = document.getElementById("sample_output");
  // Fullscreen button is hidden while sample isn't initialized.
  var full_screen = document.getElementById("full_screen");
  full_screen.style.display = "none";
  document.getElementsByTagName("body")[0].onresize = CanvasResize;
  function CanvasResize() {
    sample_canvas.width = sample_canvas.clientWidth;
    sample_canvas.height = sample_canvas.clientWidth * 9 / 16;
  }
  function CheckWebGLSupport(canvas) {
    const gl = document.createElement('canvas').getContext('webgl2');
    if (!gl) {
      return [false, 'your browser/OS/drivers do not support WebGL2'];
    } else {
      return [true, 'WebGL is supported by your browser.'];
    }
  }
  function OnSampleSuccess() {
    full_screen.style.display = "inline";
    sample_status.innerHTML = "&nbsp;";
    // Initialize canvas size
    CanvasResize();
  }
  function OnSampleFailure(text) {
    sample_status.innerHTML = text;
  }
  function OnSampleProgress(text) {
    sample_status.innerHTML = text;
  }
  
  var webgl_support = CheckWebGLSupport(sample_canvas);
  if(!webgl_support[0]) {
    OnSampleFailure(webgl_support[1]);
  } else {
    var Module = {
      arguments: ['--resolution=7'],
      preRun: [],
      postRun: [],
      print: (function() {
        if (sample_output) sample_output.value = ''; // Clears browser cache
        return function(text) {
          text = Array.prototype.slice.call(arguments).join(' ');
          console.log(text);
          if (sample_output) {
            sample_output.value += text + "\n";
            sample_output.scrollTop = sample_output.scrollHeight; // Focus on bottom
          }
        };
      })(),
      printErr: function(text) {
        text = Array.prototype.slice.call(arguments).join(' ');
        console.error(text);
      },
      canvas: (() => {
        var canvas = document.getElementById("sample_canvas");

        // As a default initial behavior, pop up an alert when webgl context is lost. To make your
        // application robust, you may want to override this behavior before shipping!
        // See http://www.khronos.org/registry/webgl/specs/latest/1.0/#5.15.2
        canvas.addEventListener("webglcontextlost", (e) => { alert('WebGL context lost. You will need to reload the page.'); e.preventDefault(); }, false);

        return canvas;
      })(),
      setStatus: function(text) {
        if(text == '') {
          // This signals sample initialization success.
          OnSampleSuccess();
        } else {
          OnSampleProgress(text);
        }
      }
    };
    Module.setStatus('Downloading...');
  }
</script>
<script async type="text/javascript" src="{{site.baseurl}}/{{include.emscripten_path}}"></script>